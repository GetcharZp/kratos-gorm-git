// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.1
// - protoc             v3.14.0
// source: api/git/repo.proto

package git

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationRepoCreateRepo = "/api.git.Repo/CreateRepo"
const OperationRepoDeleteRepo = "/api.git.Repo/DeleteRepo"
const OperationRepoListRepo = "/api.git.Repo/ListRepo"
const OperationRepoRepoAuth = "/api.git.Repo/RepoAuth"
const OperationRepoUpdateRepo = "/api.git.Repo/UpdateRepo"

type RepoHTTPServer interface {
	CreateRepo(context.Context, *CreateRepoRequest) (*CreateRepoReply, error)
	DeleteRepo(context.Context, *DeleteRepoRequest) (*DeleteRepoReply, error)
	ListRepo(context.Context, *ListRepoRequest) (*ListRepoReply, error)
	RepoAuth(context.Context, *RepoAuthRequest) (*RepoAuthReply, error)
	UpdateRepo(context.Context, *UpdateRepoRequest) (*UpdateRepoReply, error)
}

func RegisterRepoHTTPServer(s *http.Server, srv RepoHTTPServer) {
	r := s.Route("/")
	r.POST("/repo/create", _Repo_CreateRepo0_HTTP_Handler(srv))
	r.PUT("/repo/update", _Repo_UpdateRepo0_HTTP_Handler(srv))
	r.DELETE("/repo/delete", _Repo_DeleteRepo0_HTTP_Handler(srv))
	r.GET("/repo/list", _Repo_ListRepo0_HTTP_Handler(srv))
	r.POST("/repo/auth", _Repo_RepoAuth0_HTTP_Handler(srv))
}

func _Repo_CreateRepo0_HTTP_Handler(srv RepoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateRepoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRepoCreateRepo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateRepo(ctx, req.(*CreateRepoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateRepoReply)
		return ctx.Result(200, reply)
	}
}

func _Repo_UpdateRepo0_HTTP_Handler(srv RepoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateRepoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRepoUpdateRepo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateRepo(ctx, req.(*UpdateRepoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateRepoReply)
		return ctx.Result(200, reply)
	}
}

func _Repo_DeleteRepo0_HTTP_Handler(srv RepoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteRepoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRepoDeleteRepo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteRepo(ctx, req.(*DeleteRepoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteRepoReply)
		return ctx.Result(200, reply)
	}
}

func _Repo_ListRepo0_HTTP_Handler(srv RepoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListRepoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRepoListRepo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListRepo(ctx, req.(*ListRepoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListRepoReply)
		return ctx.Result(200, reply)
	}
}

func _Repo_RepoAuth0_HTTP_Handler(srv RepoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RepoAuthRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRepoRepoAuth)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RepoAuth(ctx, req.(*RepoAuthRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RepoAuthReply)
		return ctx.Result(200, reply)
	}
}

type RepoHTTPClient interface {
	CreateRepo(ctx context.Context, req *CreateRepoRequest, opts ...http.CallOption) (rsp *CreateRepoReply, err error)
	DeleteRepo(ctx context.Context, req *DeleteRepoRequest, opts ...http.CallOption) (rsp *DeleteRepoReply, err error)
	ListRepo(ctx context.Context, req *ListRepoRequest, opts ...http.CallOption) (rsp *ListRepoReply, err error)
	RepoAuth(ctx context.Context, req *RepoAuthRequest, opts ...http.CallOption) (rsp *RepoAuthReply, err error)
	UpdateRepo(ctx context.Context, req *UpdateRepoRequest, opts ...http.CallOption) (rsp *UpdateRepoReply, err error)
}

type RepoHTTPClientImpl struct {
	cc *http.Client
}

func NewRepoHTTPClient(client *http.Client) RepoHTTPClient {
	return &RepoHTTPClientImpl{client}
}

func (c *RepoHTTPClientImpl) CreateRepo(ctx context.Context, in *CreateRepoRequest, opts ...http.CallOption) (*CreateRepoReply, error) {
	var out CreateRepoReply
	pattern := "/repo/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRepoCreateRepo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RepoHTTPClientImpl) DeleteRepo(ctx context.Context, in *DeleteRepoRequest, opts ...http.CallOption) (*DeleteRepoReply, error) {
	var out DeleteRepoReply
	pattern := "/repo/delete"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRepoDeleteRepo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RepoHTTPClientImpl) ListRepo(ctx context.Context, in *ListRepoRequest, opts ...http.CallOption) (*ListRepoReply, error) {
	var out ListRepoReply
	pattern := "/repo/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRepoListRepo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RepoHTTPClientImpl) RepoAuth(ctx context.Context, in *RepoAuthRequest, opts ...http.CallOption) (*RepoAuthReply, error) {
	var out RepoAuthReply
	pattern := "/repo/auth"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRepoRepoAuth))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RepoHTTPClientImpl) UpdateRepo(ctx context.Context, in *UpdateRepoRequest, opts ...http.CallOption) (*UpdateRepoReply, error) {
	var out UpdateRepoReply
	pattern := "/repo/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRepoUpdateRepo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
